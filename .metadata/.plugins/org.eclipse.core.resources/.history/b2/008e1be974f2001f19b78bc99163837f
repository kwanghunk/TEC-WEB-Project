package com.tecProject.tec.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tecProject.tec.domain.UserSupport;
import com.tecProject.tec.domain.UserSupport.InquiryCategory;
import com.tecProject.tec.domain.UserSupport.InquiryStatus;
import com.tecProject.tec.dto.support.AdminSupportDetailDTO;
import com.tecProject.tec.repository.SupportRepository;

@Service
public class AdminSupportService {
	private final SupportRepository supportRepository;
	
	public AdminSupportService(SupportRepository supportRepository) {
		this.supportRepository = supportRepository;
	}
	
    // 문의내역 전체조회(관리자)
	public Page<UserSupport> getFilteredInquiries(Pageable pageable, InquiryStatus status, InquiryCategory category, String keyword) {
	    if (status != null && category != null && keyword != null) { // 문의상태 + 카테고리 + 키워드 조회
	        return supportRepository.findByStatusAndCategoryAndTitleContainingAndIsDeletedAndParentInquiryIsNull(status, category, keyword, "N", pageable);
	    } else if (status != null && category != null) { // 문의상태 + 카테고리
	    	return supportRepository.findByStatusAndCategoryAndIsDeletedAndParentInquiryIsNull(status, category, "N", pageable);
	    } else if (status != null && keyword != null) { // 문의상태 + 키워드
	    	return supportRepository.findByStatusAndTitleContainingAndIsDeletedAndParentInquiryIsNull(status, keyword, "N", pageable);
	    } else if (category != null && keyword != null) { // 카테고리 + 키워드
	    	return supportRepository.findByCategoryAndTitleContainingAndIsDeletedAndParentInquiryIsNull(category, keyword, "N", pageable);
	    } else if (status != null) { // 문의상태 조회
	        return supportRepository.findByStatusAndIsDeletedAndParentInquiryIsNull(status, "N", pageable);
	    } else if (category != null) { // 카테고리 조회
	        return supportRepository.findByCategoryAndIsDeletedAndParentInquiryIsNull(category, "N", pageable);
	    } else if (keyword != null) { // 키워드 조회
	        return supportRepository.findByTitleContainingAndIsDeletedAndParentInquiryIsNull(keyword, "N", pageable);
	    } // 기본 전체 조회
	    return supportRepository.findByIsDeletedAndParentInquiryIsNull("N", pageable);
		
//		if (category != null && keyword != null) { // 카테고리 + 키워드 조회
//	        return supportRepository.findByCategoryAndTitleContainingAndIsDeletedAndParentInquiryIsNull(category, keyword, "N", pageable);
//	    } else if (category != null) { // 카테고리 조회
//	        return supportRepository.findByCategoryAndIsDeletedAndParentInquiryIsNull(category, "N", pageable);
//	    } else if (keyword != null) { // 키워드 조회
//	        return supportRepository.findByTitleContainingAndIsDeletedAndParentInquiryIsNull(keyword, "N", pageable);
//	    } // 기본 전체 조회
//	    return supportRepository.findByIsDeletedAndParentInquiryIsNull("N", pageable); 
	}

	// 문의내역 상세조회(관리자)
	@Transactional
	public Optional<AdminSupportDetailDTO> getInquiryById(int inquiryNo) { 
        Optional<UserSupport> inquiryOpt  = supportRepository.findById(inquiryNo);
        if (inquiryOpt .isEmpty() || "Y".equals(inquiryOpt.get().getIsDeleted())) {
            return Optional.empty();
        } 

        UserSupport inquiry = inquiryOpt .get(); 
        // 계층형 구조 유지하도록 정렬 (부모-자식 관계 반영)
        List<UserSupport> sortedReplies = inquiry.getReplies().stream()
                .sorted(Comparator.comparing(UserSupport::getCreatedDate))
                .collect(Collectors.toList());

        Map<Integer, AdminSupportDetailDTO> replyMap = new HashMap<>();
        List<AdminSupportDetailDTO> structuredReplies = new ArrayList<>();

        for (UserSupport reply : sortedReplies) {
            AdminSupportDetailDTO dto = AdminSupportDetailDTO.fromEntity(reply);
            replyMap.put(dto.getInquiryNo(), dto);

            if (reply.getParentInquiry() != null) {
                AdminSupportDetailDTO parentDto = replyMap.get(reply.getParentInquiry().getInquiryNo());
                if (parentDto != null) {
                    parentDto.getReplies().add(dto);
                }
            } else {
                structuredReplies.add(dto);
            }
        }

        // DTO 변환 (계층 구조 유지)
        AdminSupportDetailDTO inquiryDTO = AdminSupportDetailDTO.fromEntity(inquiry);
        inquiryDTO.setReplies(structuredReplies);

        return Optional.of(inquiryDTO);
    }

}
