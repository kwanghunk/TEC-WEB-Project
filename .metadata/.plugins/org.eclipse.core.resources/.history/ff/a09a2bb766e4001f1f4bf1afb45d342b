package com.tecProject.tec.auth;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.Map;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.redis.core.ValueOperations;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.ResponseEntity;

import com.tecProject.tec.controller.LoginController;

public class RefreshTokenTest {
	
	private JWTUtil jwtUtil;
	
	@Mock
	private StringRedisTemplate redisTemplate;
	
	@Mock
	private LoginController loginController;
	
	private String testUsername = "testUser";
	private String testRole = "ROLE_USER";
	private String tokenFamily;
	private String accessToken;
	private String refreshToken;
	
	@BeforeEach
	void setUp() {
	    MockitoAnnotations.openMocks(this);

	    tokenFamily = UUID.randomUUID().toString();
	    accessToken = jwtUtil.createAccessToken(testUsername, testRole, 1000L * 60 * 15); // 15Î∂Ñ
	    refreshToken = jwtUtil.createRefreshToken(testUsername, tokenFamily);

	    when(redisTemplate.opsForValue()).thenReturn(valueOperations);
	    when(redisTemplate.opsForValue().get(tokenFamily)).thenReturn(refreshToken); // üí° Refresh Token Mock ÏÑ§Ï†ï Ï∂îÍ∞Ä
	}

	
	@Test
	void testRefreshTokenRotation() {
		when(redisTemplate.opsForValue().get("tokenFamily")).thenReturn(refreshToken);
		
		ResponseEntity<?> response = loginController.refreshAccessToken(refreshToken);
		
		assertEquals(200, response.getStatusCodeValue());
		
		@SuppressWarnings("unchecked")
		Map<String, String> responseBody = (Map<String, String>) response.getBody();
		assertNotNull(responseBody.get("accessToken"));
		assertNotNull(responseBody.get("refreshToken"));
	}
	
	@Test
	void testRefreshTokenReuseDetection() {
		when(redisTemplate.opsForValue().get("tokenFamily")).thenReturn(null); // Ïù¥ÎØ∏ ÏÇ¨Ïö©Îêú Refresh Token
		
	    ResponseEntity<?> response = loginController.refreshAccessToken(refreshToken);

	    assertEquals(401, response.getStatusCodeValue());
	}
}
