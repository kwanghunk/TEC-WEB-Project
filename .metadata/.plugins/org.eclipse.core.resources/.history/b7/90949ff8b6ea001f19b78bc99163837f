package com.tecProject.tec.auth;

import java.io.IOException;
import java.util.Date;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import com.tecProject.tec.domain.User;
import com.tecProject.tec.dto.CustomUserDetails;

import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JWTFilter extends OncePerRequestFilter{

	private final JWTUtil jwtUtil;
	
	public JWTFilter(JWTUtil jwtUtil) {
		this.jwtUtil = jwtUtil;
	}
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		// request에서 Authorization 헤더를 찾음
		String authorization= request.getHeader("Authorization");
		
		// Authorization 헤더 검증
		if (authorization == null || !authorization.startsWith("Bearer ")) {
			filterChain.doFilter(request, response);
			return; // 조건이 해당되면 메소드 종료 (필수)
		}
		
		// Bearer 부분 제거 후 순수 토큰만 획득
		String token = authorization.replace("Bearer ", "");

	    try {
            Claims claims = jwtUtil.parseToken(token); // JWT 파싱하여 Claims 추출
            
	    	// 토큰 소멸 시간 검증
            Date expiration = claims.getExpiration();
	        if (expiration.before(new Date())) { // 현재 시간과 비교하여 만료 여부 체크
	            System.out.println("Access Token 만료됨, Refresh Token 확인 중");
	            
	            String refreshToken = getRefreshTokenFromCookie(request); // Refresh Token 가져오기
	            
                if (refreshToken == null || !jwtUtil.isRefreshTokenValid(refreshToken)) {
                    System.out.println("Refresh Token이 유효하지 않음, 401 반환");
                    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                    response.getWriter().write("Unauthorized - Invalid Refresh Token");
                    return;
                }
                
                // 새 Access Token 발급
                String username = claims.get("username", String.class);
                String userType = claims.get("userType", String.class);
                String tokenFamily = claims.get("tokenFamily", String.class);

                String newAccessToken = jwtUtil.createAccessToken(username, userType, 1000L * 60 * 15);
                String newRefreshToken = jwtUtil.createRefreshToken(username, tokenFamily);
                
                jwtUtil.revokeRefreshToken(refreshToken); // 기존 Refresh Token 폐기
	            
                // 새로운 Refresh Token을 쿠키에 저장
                Cookie newRefreshCookie = new Cookie("refreshToken", newRefreshToken);
                newRefreshCookie.setHttpOnly(true);
                newRefreshCookie.setSecure(true);
                newRefreshCookie.setPath("/");
                response.addCookie(newRefreshCookie);
                
                response.setHeader("Authorization", "Bearer " + newAccessToken); // 새 Access Token을 응답 헤더에 추가
	        }
		
			//토큰에서 username과 role 획득
            String username = claims.get("username", String.class); // 사용자 이름 가져오기
            String userType = claims.get("userType", String.class); // 사용자 역할 가져오기
			
			//user를 생성하여 값 set
			User user = new User();
			user.setUsername(username);
			user.setPassword("temppassword");// 매번 db 조회할 필요 없게 임의값 넣어둠
			user.setUserType(userType);
			
			//UserDetails에 회원 정보 객체 담기
			CustomUserDetails customUserDetails = new CustomUserDetails(user);
			
			//스프링 시큐리티 인증 토큰 생성
			Authentication authToken = new UsernamePasswordAuthenticationToken(
					customUserDetails, null, customUserDetails.getAuthorities());
			//세션에 사용자 등록
			SecurityContextHolder.getContext().setAuthentication(authToken);
	    } catch (Exception e) {
	    	System.out.println("JWT 검증 실패: " + e.getMessage());
	    }
 		filterChain.doFilter(request, response);
	}
	
	private String getRefreshTokenFromCookie(HttpServletRequest request) {
		if (request.getCookies() != null) {
			for (Cookie cookie : request.getCookies()) {
				if (cookie.getName().equals("refreshToken")) {
					return cookie.getValue();
				}
			}
		}
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}