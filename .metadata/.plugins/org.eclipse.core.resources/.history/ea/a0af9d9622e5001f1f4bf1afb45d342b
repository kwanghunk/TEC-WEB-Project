package com.tecProject.tec.auth;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.Base64;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;

import io.jsonwebtoken.Claims;

public class JwtUtilTest {

	private static final Logger logger = LoggerFactory.getLogger(JwtUtilTest.class);
	
    private JWTUtil jwtUtil;

    @Mock
    private StringRedisTemplate redisTemplate;

    @Mock
    private ValueOperations<String, String> valueOperations;

    private String testUsername = "testUser";
    private String testRole = "ROLE_USER";
    private String tokenFamily;
    private String accessToken;
    private String refreshToken;
    private static final String SECRET_KEY = "asfhailehaweihqsdfkuasdfhawjwperjdsfserhjjehewyugeaefaaaaaaaaaaaaaaaaaaaaabbbbbbbb";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // Î®ºÏ†Ä Redis Mock ÏÑ§Ï†ï Ï†ÅÏö©
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        doNothing().when(valueOperations).set(anyString(), anyString(), anyLong(), any());

        // JWTUtil Í∞ùÏ≤¥ ÏÉùÏÑ±
        jwtUtil = new JWTUtil(SECRET_KEY, redisTemplate);

        // ÌÜ†ÌÅ∞ ÏÉùÏÑ±
        tokenFamily = UUID.randomUUID().toString();
        accessToken = jwtUtil.createAccessToken(testUsername, testRole, 1000L * 60 * 15); // 15Î∂Ñ
        refreshToken = jwtUtil.createRefreshToken(testUsername, tokenFamily);
    }

    @Test
    void testCreateAccessToken() {
        assertNotNull(accessToken);
        
        Claims claims = jwtUtil.parseToken(accessToken);
        
        // Access Token Í≤ÄÏ¶ù Î°úÍ∑∏ Ï∂îÍ∞Ä
        logger.info("‚úÖ Generated Access Token: {}", accessToken);
        logger.info("üõ†Ô∏è Token Claims - Username: {}", claims.get("username"));
        logger.info("üõ†Ô∏è Token Claims - Role: {}", claims.get("userType"));

        assertEquals(testUsername, claims.get("username"), "Username mismatch in token");
        assertEquals(testRole, claims.get("userType"), "Role mismatch in token");
    }

    @Test
    void testCreateRefreshToken() {
        refreshToken = jwtUtil.createRefreshToken(testUsername, tokenFamily);
        assertNotNull(refreshToken);

        // Redis Ï†ÄÏû• Í≤ÄÏ¶ù ÏàòÏ†ï (times(1) ‚Üí atLeastOnce())
        verify(valueOperations, atLeastOnce()).set(eq(tokenFamily), eq(refreshToken), anyLong(), any());

        Claims claims = jwtUtil.parseToken(refreshToken);
        
        // Refresh Token Í≤ÄÏ¶ù Î°úÍ∑∏ Ï∂îÍ∞Ä
        logger.info("‚úÖ Generated Refresh Token: {}", refreshToken);
        logger.info("üõ†Ô∏è Token Claims - Username: {}", claims.get("username"));
        logger.info("üõ†Ô∏è Token Claims - Token Family: {}", claims.get("tokenFamily"));
        
        assertEquals(testUsername, claims.get("username"));
        assertEquals(tokenFamily, claims.get("tokenFamily"));
    }

    @Test
    void testRefreshTokenValidation() {
        when(redisTemplate.opsForValue().get(tokenFamily)).thenReturn(refreshToken);

        assertTrue(jwtUtil.isRefreshTokenValid(refreshToken));
    }

    @Test
    void testExpiredRefreshTokenValidation() {
        when(redisTemplate.opsForValue().get(tokenFamily)).thenReturn(null); // RedisÏóêÏÑú ÏÇ≠Ï†úÎêú Í≤ΩÏö∞

        assertFalse(jwtUtil.isRefreshTokenValid(refreshToken));
    }
}

