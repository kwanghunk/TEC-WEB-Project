package com.tecProject.tec.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tecProject.tec.domain.UserSupport;
import com.tecProject.tec.domain.UserSupport.InquiryCategory;
import com.tecProject.tec.domain.UserSupport.InquiryStatus;
import com.tecProject.tec.dto.support.AdminSupportDetailDTO;
import com.tecProject.tec.repository.SupportRepository;
import com.tecProject.tec.repository.UserRepository;

@Service
public class AdminSupportService {
	private final SupportRepository supportRepository;
	private final UserRepository userRepository;
	
	public AdminSupportService(SupportRepository supportRepository, UserRepository userRepository) {
		this.supportRepository = supportRepository;
		this.userRepository = userRepository;
	}
	
    // 문의내역 전체조회(관리자)
	public Page<UserSupport> getFilteredInquiries(Pageable pageable, InquiryStatus status, InquiryCategory category, String keyword) {
	    if (status != null && category != null && keyword != null) { // 문의상태 + 카테고리 + 키워드 조회
	        return supportRepository.findByStatusAndCategoryAndTitleContainingAndIsDeletedAndParentInquiryIsNull(status, category, keyword, "N", pageable);
	    } else if (status != null && category != null) { // 문의상태 + 카테고리
	    	return supportRepository.findByStatusAndCategoryAndIsDeletedAndParentInquiryIsNull(status, category, "N", pageable);
	    } else if (status != null && keyword != null) { // 문의상태 + 키워드
	    	return supportRepository.findByStatusAndTitleContainingAndIsDeletedAndParentInquiryIsNull(status, keyword, "N", pageable);
	    } else if (category != null && keyword != null) { // 카테고리 + 키워드
	    	return supportRepository.findByCategoryAndTitleContainingAndIsDeletedAndParentInquiryIsNull(category, keyword, "N", pageable);
	    } else if (status != null) { // 문의상태 조회
	        return supportRepository.findByStatusAndIsDeletedAndParentInquiryIsNull(status, "N", pageable);
	    } else if (category != null) { // 카테고리 조회
	        return supportRepository.findByCategoryAndIsDeletedAndParentInquiryIsNull(category, "N", pageable);
	    } else if (keyword != null) { // 키워드 조회
	        return supportRepository.findByTitleContainingAndIsDeletedAndParentInquiryIsNull(keyword, "N", pageable);
	    } // 기본 전체 조회
	    return supportRepository.findByIsDeletedAndParentInquiryIsNull("N", pageable); 
	}

	@Transactional
	public Optional<AdminSupportDetailDTO> getInquiryById(int inquiryNo) {
	    Optional<UserSupport> inquiry = supportRepository.findById(inquiryNo);
	    if (inquiry.isEmpty() || "Y".equals(inquiry.get().getIsDeleted())) {
	        return Optional.empty();
	    }

	    UserSupport inquiryEntity = inquiry.get();
	    
	    // ✅ 원문 작성자 및 관리자 포함된 사용자 목록 조회
	    List<String> allowedUsers = getAllowedUsers(inquiryEntity);
	    
	    // ✅ 모든 하위 계층 포함된 답변 조회 (불필요한 중복 제거)
	    List<UserSupport> allReplies = supportRepository.findAllByInquiryNoAndUsers(inquiryNo, allowedUsers)
	        .stream().distinct().collect(Collectors.toList()); // ✅ 중복 제거
	    
	    // ✅ 삭제된 답변 제외
	    allReplies = allReplies.stream()
	            .filter(reply -> !"Y".equals(reply.getIsDeleted()))
	            .collect(Collectors.toList());

	    // ✅ 모든 답변을 Map에 저장 (빠른 탐색을 위해)
	    Map<Integer, AdminSupportDetailDTO> replyMap = new HashMap<>();
	    for (UserSupport reply : allReplies) {
	        AdminSupportDetailDTO replyDTO = AdminSupportDetailDTO.fromEntity(reply);
	        replyDTO.setReplies(new ArrayList<>());
	        replyMap.put(reply.getInquiryNo(), replyDTO);
	    }

	    // ✅ 부모-자식 관계 매핑 (2번 반복 방지)
	    List<AdminSupportDetailDTO> structuredReplies = new ArrayList<>();
	    Set<Integer> processedReplies = new HashSet<>(); // ✅ 중복 방지용 Set 추가
	    for (AdminSupportDetailDTO replyDTO : replyMap.values()) {
	        if (replyDTO.getParentInquiry() == null || replyDTO.getParentInquiry().equals(inquiryNo)) {
	            structuredReplies.add(replyDTO);
	        } else {
	            AdminSupportDetailDTO parentReply = replyMap.get(replyDTO.getParentInquiry());
	            if (parentReply != null && !processedReplies.contains(replyDTO.getInquiryNo())) { // ✅ 중복 체크 추가
	                parentReply.getReplies().add(replyDTO);
	                processedReplies.add(replyDTO.getInquiryNo());
	            }
	        }
	    }

	    // ✅ 재귀적으로 트리 구조 구성 (모든 답변 포함, 중복 방지)
	    structuredReplies.forEach(reply -> buildReplyTree(reply, replyMap, processedReplies));

	    // ✅ 원문과 연결
	    AdminSupportDetailDTO inquiryDTO = AdminSupportDetailDTO.fromEntity(inquiryEntity);
	    inquiryDTO.setReplies(structuredReplies);

	    System.out.println("✅ [DEBUG] inquiryDTO: " + inquiryDTO);
	    return Optional.of(inquiryDTO);
	}
	
	// 재귀적으로 답변 트리를 구축하는 메서드
	private void buildReplyTree(AdminSupportDetailDTO parent, Map<Integer, AdminSupportDetailDTO> replyMap, Set<Integer> processedReplies) {
	    List<AdminSupportDetailDTO> children = new ArrayList<>();
	    for (AdminSupportDetailDTO reply : replyMap.values()) {
	        if (reply.getParentInquiry() != null && reply.getParentInquiry().equals(parent.getInquiryNo())) {
	            if (!processedReplies.contains(reply.getInquiryNo())) { // ✅ 중복 방지
	                children.add(reply);
	                processedReplies.add(reply.getInquiryNo());
	            }
	        }
	    }

	    parent.setReplies(children);
	    for (AdminSupportDetailDTO child : children) {
	        buildReplyTree(child, replyMap, processedReplies);  // ✅ 재귀 호출로 자식 답변 추가
	    }
	}
	
	// 특정 문의(원문)의 작성자 및 관리자 계정을 포함한 사용자 목록 조회
	private List<String> getAllowedUsers(UserSupport inquiryEntity) {
	    List<String> allowedUsers = new ArrayList<>();
	    
	    // ✅ 원문 작성자 추가
	    allowedUsers.add(inquiryEntity.getUsername());
	    
	    // ✅ 관리자 계정 추가 (관리자 역할을 가진 사용자 조회)
	    List<String> adminUsers = userRepository.findAllAdmins(); // ❗ Admin 계정 조회하는 메서드 추가 필요
	    allowedUsers.addAll(adminUsers);

	    return allowedUsers;
	}
}