package com.tecProject.tec.auth;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.http.ResponseEntity;

import com.tecProject.tec.controller.LoginController;

public class RefreshTokenTest {
    
    private JWTUtil jwtUtil;

    @Mock
    private StringRedisTemplate redisTemplate;
    
    @Mock
    private ValueOperations<String, String> valueOperations;
    
    @Mock
    private LoginController loginController;

    private String testUsername = "testUser";
    private String testRole = "ROLE_USER";
    private String tokenFamily;
    private String accessToken;
    private String refreshToken;
    private static final String SECRET_KEY = "asfhailehaweihqsdfkuasdfhawjwperjdsfserhjjehewyugeaefaaaaaaaaaaaaaaaaaaaaabbbbbbbb";
    private static final Logger log = LoggerFactory.getLogger(RefreshTokenTest.class);
    
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // ✅ Redis Mock 설정 추가 (refreshToken을 반환하도록 설정)
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get(anyString())).thenReturn(refreshToken); // ✅ 모든 tokenFamily 값에 대해 refreshToken 반환

        jwtUtil = new JWTUtil(SECRET_KEY, redisTemplate);
        
        tokenFamily = UUID.randomUUID().toString();
        accessToken = jwtUtil.createAccessToken(testUsername, testRole, 1000L * 60 * 15); // 15분
        refreshToken = jwtUtil.createRefreshToken(testUsername, tokenFamily);
    }

    @Test
    void testRefreshTokenRotation() {
        when(jwtUtil.isRefreshTokenValid(anyString())).thenReturn(true);
        when(jwtUtil.parseToken(anyString())).thenReturn(mockClaims());
        when(jwtUtil.createAccessToken(anyString(), anyString(), anyLong())).thenReturn("mockNewAccessToken");
        when(jwtUtil.createRefreshToken(anyString(), anyString())).thenReturn("mockNewRefreshToken");

        ResponseEntity<?> response = loginController.refreshAccessToken(refreshToken);

        System.out.println("[TEST] Response Status: " + response);
        assertNotNull(response, "[ERROR] Response is null!"); // ✅ 강제 체크 추가
        assertEquals(200, response.getStatusCodeValue());
    }
    
    @Test
    void testRefreshTokenReuseDetection() {
        when(redisTemplate.opsForValue().get(tokenFamily)).thenReturn(null); // ✅ 이미 사용된 Refresh Token

        ResponseEntity<?> response = loginController.refreshAccessToken(refreshToken);

        // ✅ 실제 응답 값 확인 (디버깅)
        System.out.println("Response Status: " + response.getStatusCodeValue());
        System.out.println("Response Body: " + response.getBody());

        assertEquals(401, response.getStatusCodeValue());
    }
}
