package com.tecProject.tec.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.tecProject.tec.domain.User;
import com.tecProject.tec.dto.UserDTO;
import com.tecProject.tec.repository.UserRepository;

@Service
public class UserService {

    @Autowired
    private final UserRepository userRepository;
    private final BCryptPasswordEncoder bCryptPasswordEncoder;
    
    public UserService(UserRepository userRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {
    	this.userRepository = userRepository;
    	this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }
    
	public UserDTO getUserInfo(String username) {
		User user = userRepository.findByUsername(username);
        if (user == null) {
            throw new IllegalArgumentException("존재하지 않는 사용자입니다.");
        }
        
		return new UserDTO(
                user.getUsername(),
                user.getName(),
                user.getEmail(),
                user.getPhone(),
                user.getCreateDate(),
                user.getSsnFirst()
        );
	}

	public void updateUserProfile(String username, UserDTO userDTO) {
		Optional<User> userOptional = userRepository.findOptionalByUsername(username);
		User user = userOptional.orElseThrow(() -> new IllegalArgumentException("존재하지 않는 사용자입니다."));

        // 이름, 이메일, 연락처만 업데이트
        user.setName(userDTO.getName());
        user.setEmail(userDTO.getEmail());
        user.setPhone(userDTO.getPhone());

        userRepository.save(user);
	}
    
    public boolean changePassword(String username, String currentPassword, String newPassword) {
    	Optional<User> userOptional = userRepository.findOptionalByUsername(username);
        if (userOptional.isEmpty()) {
            throw new IllegalArgumentException("User not found");
        }
        User user = userOptional.get();
        // 현재 비밀번호 확인
        if (!bCryptPasswordEncoder.matches(currentPassword, user.getPassword())) {
            return false;
        }

        // 새 비밀번호 암호화 후 저장
        user.setPassword(bCryptPasswordEncoder.encode(newPassword));
        userRepository.save(user);
        return true;
    }

	public boolean deleteUser(String username) {
		Optional<User> existingUser = userRepository.findOptionalByUsername(username);
		if (existingUser.isPresent()) {
			User userDelete = existingUser.get();
			if (userDelete.getUsername().equalsIgnoreCase(username)) {
				userRepository.deleteByUsername(username);
				return true;
			}
		}
		System.out.println("회원탈퇴에 실패했습니다.");
		return false;
	}



}
