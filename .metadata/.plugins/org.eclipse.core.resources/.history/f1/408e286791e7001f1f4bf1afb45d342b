package com.tecProject.tec.config;

import java.util.List;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;

import com.tecProject.tec.auth.JWTFilter;
import com.tecProject.tec.auth.JWTUtil;
import com.tecProject.tec.auth.LoginFilter;
import com.tecProject.tec.auth.RequestThrottleFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	private final AuthenticationConfiguration authenticationConfiguration;
	private final JWTUtil jwtUtil;
	
	public SecurityConfig(AuthenticationConfiguration authenticationConfiguration, JWTUtil jwtUtil) {
		this.authenticationConfiguration = authenticationConfiguration;
		this.jwtUtil = jwtUtil;
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
		return configuration.getAuthenticationManager();
	}
	
	// 비밀번호 암호화
    @Bean
    public BCryptPasswordEncoder BCryptPasswordEncoder() {
        return new BCryptPasswordEncoder(); // 비밀번호 암호화
    }
    
    //Rate Limiting 필터 추가(Brute Force Attack 방어) - 60초 동안 5번 이상 /user/refresh 요청 시 차단
    @Bean
    public FilterRegistrationBean<RequestThrottleFilter> rateLimitingFilter() {
    	FilterRegistrationBean<RequestThrottleFilter> registrationBean = new FilterRegistrationBean<>();
    	registrationBean.setFilter(new RequestThrottleFilter());
    	registrationBean.addUrlPatterns("/user/refresh"); // /user/refresh API에만 적용
    	return registrationBean;
    }
    
    //보안설정 관리 함수
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // CSRF 비활성화 (테스트 환경)
            .cors(cors -> cors.configurationSource(request -> {
                CorsConfiguration config = new CorsConfiguration();
                config.setAllowedOrigins(List.of("http://localhost:3000")); // React 개발 서버 허용
                config.setAllowedMethods(List.of("*"));
                config.setAllowedHeaders(List.of("*"));
                config.setAllowCredentials(true);
                return config;
            }))
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // JWT 사용 시 세션 비활성화
            )
            .authorizeHttpRequests(auth -> auth
                // 인증이 필요한 경로
                .requestMatchers("/user/me").authenticated()
                
                // 인증 없이 접근 가능한 경로
                .requestMatchers("/user/login", "/user/refresh", "/user/logout").permitAll()
                
                // 관리자 전용 경로
                .requestMatchers("/admin/**", "/Admin/**", "/api/code/**").hasRole("ADMIN")
                
                // 기타 공개 API
                .requestMatchers(
                    "/api/history/**", "/ip/check-ip",
                    "/admin/faqs", "/api/user-support/**", "/join/**",
                    "/faq/faqs", "/faq/**", "/faq/check-admin",
                    "/api/search"
                ).permitAll()
                
                // 나머지 모든 요청은 기본적으로 인증 필요
                .anyRequest().authenticated()
            )
            .httpBasic(auth -> auth.disable()) // HTTP Basic 인증 비활성화
            .formLogin(form -> form.disable()) // 기본 로그인 폼 비활성화 (REST API 방식 사용)
            .logout(logout -> logout
                .logoutUrl("/user/logout")
                .permitAll()
            )
            .addFilterBefore(new JWTFilter(jwtUtil), UsernamePasswordAuthenticationFilter.class) // JWT 필터 등록
            .addFilterAt(new LoginFilter(authenticationManager(authenticationConfiguration), jwtUtil), UsernamePasswordAuthenticationFilter.class); // 로그인 필터 추가

        return http.build();
    }
}